#include <Keypad.h>

#define RED 10
#define GREEN 11
#define BLUE A0

// Declare variables
const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

char customKey;
int redValue = 0;
int blueValue = 0;
int greenValue = 0;
char charBuffer[30];

//define the cymbols on the buttons of the keypads
char hexaKeys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {5, 4, 3, 2}; //connect to the column pinouts of the keypad

//initialize an instance of class NewKeypad
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 

void setup(){
  Serial.begin(9600);
  pinMode(RED, OUTPUT);
  pinMode(BLUE, OUTPUT);
  pinMode(GREEN, OUTPUT);
  
}


int arr2int(char value[3]){
  int colorValue = 0;

  colorValue = atoi(value);
  return colorValue;
  
}

int getValue(){
  
  int colorValue = 0;
  char value[3];
  int i = 0;
  // Clear the array
  memset(value, 0, strlen(value));
  
  while(customKey != '#'){
  
    customKey = customKeypad.getKey();
  
    if(customKey && customKey != '#'){
      
      value[i] = (char)customKey;
      i++;
    }
    
    if(i > 2){
      i = 0;
    }
    
  }

  colorValue = arr2int(value);
//  Serial.println(colorValue);
  
  return colorValue;
}


// main loop
void loop(){
  
  customKey = customKeypad.getKey();
  
  if (customKey == 'A'){
    redValue = getValue();
    analogWrite(RED, redValue);
    
    
  }

  
  if (customKey == 'B'){
    blueValue = getValue();
    analogWrite(BLUE,blueValue);
   
  }

  if (customKey == 'C'){
    greenValue = getValue();
    analogWrite(GREEN,greenValue);
  }

  if(customKey == 'D'){
    greenValue = 0;
    blueValue = 0;
    redValue = 0;
 
    analogWrite(RED, redValue);
    analogWrite(BLUE, blueValue);
    analogWrite(GREEN, greenValue);
  }
    
  
  if(customKey){
    sprintf(charBuffer, "R: %d, G: %d, B: %d", redValue, greenValue, blueValue);
    Serial.println(charBuffer);
  }
  
} //end loop()
